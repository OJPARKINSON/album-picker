{"version":3,"sources":["components/Home.js","components/Callback.js","components/AlbumPicker.js","components/Login.js","App.js","serviceWorker.js","index.js"],"names":["Home","to","Callback","props","useState","responseUrl","setResponseUrl","error","params","location","search","replace","useEffect","axios","method","url","data","code","then","resUrl","catch","err","console","log","Login","link","setLink","reslink","href","App","path","AlbumPicker","component","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"iPAYeA,EATF,WACT,OACI,oCACI,uDACA,kBAAC,IAAD,CAAMC,GAAG,UAAT,W,yBCsBGC,EAzBE,SAACC,GAAW,IAAD,EACcC,qBADd,mBACjBC,EADiB,KACJC,EADI,OAEEF,qBAFF,mBAEjBG,EAFiB,KAIlBC,GAJkB,KAITL,EAAMM,SAASC,OAAOC,QAAQ,SAAU,KAYvD,OAXAC,qBAAU,WACNC,IAAM,CACFC,OAAQ,OACRC,IAAK,YACLC,KAAM,CACFC,KAAMT,KAGbU,MAAK,SAAAC,GAAM,OAAIb,EAAea,EAAOH,SACrCI,OAAM,SAACC,GAAD,OAASC,QAAQC,IAAIF,SAE5BhB,EACO,kBAAC,IAAD,CAAUJ,GAAG,UACXM,EACF,kBAAC,IAAD,CAAUN,GAAG,YAEb,wCCdAuB,EARD,WACV,OACI,oCACI,8CCyBGA,EAtBD,WAAO,IAAD,EACQpB,mBAAS,IADjB,mBACTqB,EADS,KACHC,EADG,KAUhB,OARAd,qBAAU,WACNC,IAAM,CACFC,OAAQ,MACRC,IAAK,kBAERG,MAAK,SAAAS,GAAO,OAAID,EAAQC,EAAQX,SAChCI,OAAM,SAACC,GAAD,OAASC,QAAQC,IAAIF,SAG5B,oCACI,uDACA,4BACI,4BACI,uBAAGO,KAAMH,GAAT,a,MC0BLI,MArCf,WACE,OACE,kBAAC,IAAD,KACE,6BACE,6BACE,4BACE,4BACE,kBAAC,IAAD,CAAM5B,GAAG,KAAT,SAEF,4BACE,kBAAC,IAAD,CAAMA,GAAG,UAAT,UAEF,4BACE,kBAAC,IAAD,CAAMA,GAAG,gBAAT,mBAON,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAO6B,KAAK,UACV,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,gBACV,kBAACC,EAAD,OAEF,kBAAC,IAAD,CAAOD,KAAK,YAAYE,UAAW9B,IACnC,kBAAC,IAAD,CAAO4B,KAAK,KACV,kBAAC,EAAD,WC9BQG,QACW,cAA7BC,OAAOzB,SAAS0B,UAEe,UAA7BD,OAAOzB,SAAS0B,UAEhBD,OAAOzB,SAAS0B,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB1B,MAAK,SAAA2B,GACJA,EAAaC,gBAEd1B,OAAM,SAAAb,GACLe,QAAQf,MAAMA,EAAMwC,c","file":"static/js/main.2ea93971.chunk.js","sourcesContent":["import React from 'react'\nimport { Link } from \"react-router-dom\";\n\nconst Home = () => {\n    return (\n        <>\n            <h1>Welcome to Album Picker</h1>\n            <Link to=\"/Login\">Login</Link>\n        </>\n    )\n}\n\nexport default Home","import React, {useEffect, useState} from 'react'\nimport { Redirect } from 'react-router-dom';\nimport axios from 'axios'\n\nconst Callback = (props) => {\n    const [responseUrl, setResponseUrl] = useState();\n    const [error, setError] = useState();\n\n    const params = props.location.search.replace('?code=', '')\n    useEffect(() => {\n        axios({\n            method: 'POST',\n            url: '/callback',\n            data: {\n                code: params\n              },\n        })\n        .then(resUrl => setResponseUrl(resUrl.data))\n        .catch((err) => console.log(err));\n    })\n    if (responseUrl) {\n        return <Redirect to=\"/main\" />;\n      } else if (error) {\n        return <Redirect to=\"/#error\" />;\n      } else {\n        return <h1>Loading</h1>;\n      }\n}\n\nexport default Callback","import React from 'react'\n\n\nconst Login = () => {\n    return (\n        <>\n            <h1>Album Picker</h1>\n        </>\n    )\n}\n\nexport default Login","import React, { useEffect, useState} from 'react'\nimport axios from 'axios'\n// import {\n//     // BrowserRouter as Router,\n//     // Switch,\n//     // Route,\n//     Link\n//   } from \"react-router-dom\";\n\nconst Login = () => {\n    const [link, setLink] = useState(\"\");\n    useEffect(() => {\n        axios({\n            method: 'GET',\n            url: '/auth/spotify',\n        })\n        .then(reslink => setLink(reslink.data))\n        .catch((err) => console.log(err));\n    })\n    return (\n        <>\n            <h1>Welcome to Album Picker</h1>\n            <ul>\n                <li>\n                    <a href={link}>Login</a>\n                </li>\n            </ul>\n        </>\n    )\n}\n\nexport default Login","import React from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\nimport Home from './components/Home'\nimport Callback from './components/Callback'\nimport AlbumPicker from './components/AlbumPicker'\nimport Login from './components/Login'\nimport './App.css';\n\nfunction App() {\n  return (\n    <Router>\n      <div>\n        <nav>\n          <ul>\n            <li>\n              <Link to=\"/\">Home</Link>\n            </li>\n            <li>\n              <Link to=\"/login\">login</Link>\n            </li>\n            <li>\n              <Link to=\"/AlbumPicker\">Album Picker</Link>\n            </li>\n          </ul>\n        </nav>\n\n        {/* A <Switch> looks through its children <Route>s and\n            renders the first one that matches the current URL. */}\n        <Switch>\n          <Route path=\"/login\">\n            <Login />\n          </Route>\n          <Route path=\"/AlbumPicker\">\n            <AlbumPicker />\n          </Route>\n          <Route path=\"/callback\" component={Callback} />\n          <Route path=\"/\">\n            <Home />\n          </Route>\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}